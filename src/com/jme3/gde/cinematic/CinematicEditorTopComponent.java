/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jme3.gde.cinematic;

import com.jme3.cinematic.gui.jfx.CinematicEditorUI;
import com.jme3.cinematic.gui.jfx.StartHere;
import javafx.application.Platform;
import javafx.scene.Scene;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.jme3.gde.cinematic//CinematicEditor//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "CinematicEditorTopComponent",
        iconBase = "com/jme3/gde/cinematic/icons/cinematic_editor_icon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "com.jme3.gde.cinematic.CinematicEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CinematicEditorAction",
        preferredID = "CinematicEditorTopComponent")
@Messages({
    "CTL_CinematicEditorAction=CinematicEditor",
    "CTL_CinematicEditorTopComponent=CinematicEditor Window",
    "HINT_CinematicEditorTopComponent=This is a CinematicEditor window"
})
public final class CinematicEditorTopComponent extends TopComponent {

    public CinematicEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_CinematicEditorTopComponent());
        setToolTipText(Bundle.HINT_CinematicEditorTopComponent());
        Platform.setImplicitExit(false);
        Platform.runLater(new Runnable(){

            @Override
            public void run() {
                launchCinematicEditor();
            }
        
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cinematicEditorFX = new javafx.embed.swing.JFXPanel();
        reloadButton = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(660, 272));
        setPreferredSize(new java.awt.Dimension(660, 272));

        cinematicEditorFX.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cinematicEditorFX.setMaximumSize(new java.awt.Dimension(660, 220));
        cinematicEditorFX.setPreferredSize(new java.awt.Dimension(660, 220));

        org.openide.awt.Mnemonics.setLocalizedText(reloadButton, "Reload");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reloadButton)
                .addGap(164, 164, 164))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cinematicEditorFX, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(reloadButton)
                .addGap(3, 3, 3)
                .addComponent(cinematicEditorFX, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javafx.embed.swing.JFXPanel cinematicEditorFX;
    private javax.swing.JButton reloadButton;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "3.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    /**
     * This method loads the different renderer's, and splits the main JTable into layerContainer and timeline
     */
    private void launchCinematicEditor() {
        try {
            System.out.println("Launching cinematic editor");
            CinematicEditorUI cinematicEditor = new CinematicEditorUI();
            Scene scene = new Scene(cinematicEditor,660,220);
            scene.getStylesheets().add(new StartHere().getClass().getResource("layer_container.css").toExternalForm());
            cinematicEditorFX.setScene(scene);
            cinematicEditorFX.setVisible(true);
            cinematicEditor.initCinematicEditorUI();
            cinematicEditor.initView(CinematicEditorManager.getInstance().getCurrentClip().getRoot());
        } catch (Exception ex) {
            System.out.println("OOPPss");
            ex.printStackTrace();
        } finally {
        }
    }



}
